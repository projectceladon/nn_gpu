#version 450
layout (constant_id = 0) const int LOCAL_SZ_X = 0;
layout (constant_id = 1) const int LOCAL_SZ_Y = 0;
layout (constant_id = 2) const int LOCAL_SZ_Z = 0;
layout (constant_id = 3) const int IN_H = 0;
layout (constant_id = 4) const int IN_W = 0;
layout (constant_id = 5) const int OUT_H = 0;
layout (constant_id = 6) const int OUT_W = 0;
layout (constant_id = 7) const int STRIDE_H = 0;
layout (constant_id = 8) const int STRIDE_W = 0;
layout (constant_id = 9) const int PAD_H = 0;
layout (constant_id = 10) const int PAD_W = 0;
layout (constant_id = 11) const int FILTER_H = 0;
layout (constant_id = 12) const int FILTER_W = 0;
layout (constant_id = 13) const int CHANNELS = 0;
layout (constant_id = 14) const int BATCH = 0;
layout (constant_id = 15) const int M = 0;
layout (constant_id = 16) const int K = 0;
layout (constant_id = 17) const int N = 0;
layout (constant_id = 18) const int ACTIVATION = 0;
layout (constant_id = 19) const int NUM_ITEMS = 0;
layout (constant_id = 20) const int TAIL_M = 0;

float activation(float x)
{
  if (ACTIVATION == 1) {
    return ((x) < 0.f ? 0.f : (x));
  }
  else if (ACTIVATION == 2) {
    return ((x) > 1.f ? 1.f : (x) < -1.f ? -1.f : (x));
  }
  else if (ACTIVATION == 3) {
    return ((x) > 6.f ? 6.f : (x) < 0.f ? 0.f : (x));
  }
  else {
    return x;
  }
}

layout(binding = 0) readonly buffer Input0 {
    vec4 src0[];
};
layout(binding = 1) readonly buffer Input1 {
    vec4 src1[];
};
layout(binding = 2) readonly buffer Input2 {
    float bias[];
};
layout(binding = 3) writeonly buffer Output {
    float out0[];
};

layout(local_size_x_id = 0) in;
layout(local_size_y_id = 1) in;
layout(local_size_z_id = 2) in;

#define VEC_SIZE 4

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);
    float sum = 0.0f;
    if (gx < N && gy < M && gz < BATCH)
    {
        int image_offset  = gz * IN_H * IN_W * CHANNELS / VEC_SIZE;
        int output_offset = gz * M * N;
        for (int i = 0; i < K / VEC_SIZE; i++)
        {
            sum += dot(src0[image_offset + gy * K / VEC_SIZE + i], src1[gx * K / VEC_SIZE + i]);
        }
        sum += bias[gx];
        out0[output_offset + gy * N + gx] = activation(sum);
    }
}

