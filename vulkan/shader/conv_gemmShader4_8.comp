#version 450

layout (constant_id = 0) const int LOCAL_SZ_X = 0;
layout (constant_id = 1) const int LOCAL_SZ_Y = 0;
layout (constant_id = 2) const int LOCAL_SZ_Z = 0;
layout (constant_id = 3) const int IN_H = 0;
layout (constant_id = 4) const int IN_W = 0;
layout (constant_id = 5) const int OUT_H = 0;
layout (constant_id = 6) const int OUT_W = 0;
layout (constant_id = 7) const int STRIDE_H = 0;
layout (constant_id = 8) const int STRIDE_W = 0;
layout (constant_id = 9) const int PAD_H = 0;
layout (constant_id = 10) const int PAD_W = 0;
layout (constant_id = 11) const int FILTER_H = 0;
layout (constant_id = 12) const int FILTER_W = 0;
layout (constant_id = 13) const int CHANNELS = 0;
layout (constant_id = 14) const int BATCH = 0;
layout (constant_id = 15) const int M = 0;
layout (constant_id = 16) const int K = 0;
layout (constant_id = 17) const int N = 0;
layout (constant_id = 18) const int ACTIVATION = 0;
layout (constant_id = 19) const int NUM_ITEMS = 0;
layout (constant_id = 20) const int TAIL_M = 0;

#define VEC_SIZE 4
#define BLOCK_H 4
#define BLOCK_W 8

vec4 activation(vec4 x)
{
  if (ACTIVATION == 1) {
    return clamp(x, vec4(0.0), vec4(999999999.0));
  }
  else if (ACTIVATION == 2) {
    return clamp(x, vec4(-1.0), vec4(1.0));
  }
  else if (ACTIVATION == 3) {
    return clamp(x, vec4(0.0), vec4(6.0));
  }
  else {
    return x;
  }
}

layout(binding = 0) readonly buffer Input0 {
    vec4 src0[];
};
// filter
layout(binding = 1) readonly buffer Input1 {
    vec4 src1[];
};
layout(binding = 2) readonly buffer Input2 {
    vec4 bias[];
};
layout(binding = 3) writeonly buffer Output {
    vec4 out0[];
};

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);
    int out_x = BLOCK_W * gx;
    int out_y = BLOCK_H * gy;
    int input_batch_offset  = gz * IN_H * IN_W * CHANNELS / VEC_SIZE;
    int output_batch_offset = gz * M * N / VEC_SIZE;
    if (out_x < N && gy < M / BLOCK_H)
    {
        int width0 = K / VEC_SIZE;
        int width1 = N / VEC_SIZE;
        int src0_depth = CHANNELS / VEC_SIZE;
        int src1_read0_offset = out_x * width0;
        vec4 dot0 = vec4(0.f);
        vec4 dot1 = vec4(0.f);
        vec4 dot2 = vec4(0.f);
        vec4 dot3 = vec4(0.f);
        vec4 dot01 = vec4(0.f);
        vec4 dot11 = vec4(0.f);
        vec4 dot21 = vec4(0.f);
        vec4 dot31 = vec4(0.f);
        int i = 0;
        do
        {
            vec4 a0 = vec4(0.f);
            vec4 a1 = vec4(0.f);
            vec4 a2 = vec4(0.f);
            vec4 a3 = vec4(0.f);
            vec4 brow0  = src1[src1_read0_offset]; src1_read0_offset += width0;
            vec4 brow1  = src1[src1_read0_offset]; src1_read0_offset += width0;
            vec4 brow2  = src1[src1_read0_offset]; src1_read0_offset += width0;
            vec4 brow3  = src1[src1_read0_offset]; src1_read0_offset += width0;
            vec4 brow01 = src1[src1_read0_offset]; src1_read0_offset += width0;
            vec4 brow11 = src1[src1_read0_offset]; src1_read0_offset += width0;
            vec4 brow21 = src1[src1_read0_offset]; src1_read0_offset += width0;
            vec4 brow31 = src1[src1_read0_offset]; src1_read0_offset += width0;
            src1_read0_offset += 1 - BLOCK_W * width0;
            int dst_x = out_y % OUT_W;
            int dst_y = out_y / OUT_W;
            int org_y = dst_y * STRIDE_H - PAD_H;
            int org_x = dst_x * STRIDE_W - PAD_W;
            int src0_x = org_x + (i / src0_depth) % FILTER_W;
            int src0_y = org_y + (i / src0_depth) / FILTER_W;
            int src0_z = i % src0_depth;
            if(src0_y >= 0 && src0_y < IN_H && src0_x >= 0 && src0_x < IN_W)
            {
                a0 = src0[input_batch_offset + src0_y * (IN_W * src0_depth) + src0_x * src0_depth + src0_z];
            }
            dot0.x += dot(brow0, a0);
            dot0.y += dot(brow1, a0);
            dot0.z += dot(brow2, a0);
            dot0.w += dot(brow3, a0);
            dot01.x += dot(brow01, a0);
            dot01.y += dot(brow11, a0);
            dot01.z += dot(brow21, a0);
            dot01.w += dot(brow31, a0);
            dst_x = (out_y + 1) % OUT_W;
            dst_y = (out_y + 1) / OUT_W;
            org_y = dst_y * STRIDE_H - PAD_H;
            org_x = dst_x * STRIDE_W - PAD_W;
            src0_x = org_x + (i / src0_depth) % FILTER_W;
            src0_y = org_y + (i / src0_depth) / FILTER_W;
            if(src0_y >= 0 && src0_y < IN_H && src0_x >= 0 && src0_x < IN_W)
            {
                a1 = src0[input_batch_offset + src0_y * (IN_W * src0_depth) + src0_x * src0_depth + src0_z];
            }
            dot1.x += dot(brow0, a1);
            dot1.y += dot(brow1, a1);
            dot1.z += dot(brow2, a1);
            dot1.w += dot(brow3, a1);
            dot11.x += dot(brow01, a1);
            dot11.y += dot(brow11, a1);
            dot11.z += dot(brow21, a1);
            dot11.w += dot(brow31, a1);
            dst_x = (out_y + 2) % OUT_W;
            dst_y = (out_y + 2) / OUT_W;
            org_y = dst_y * STRIDE_H - PAD_H;
            org_x = dst_x * STRIDE_W - PAD_W;
            src0_x = org_x + (i / src0_depth) % FILTER_W;
            src0_y = org_y + (i / src0_depth) / FILTER_W;
            if(src0_y >= 0 && src0_y < IN_H && src0_x >= 0 && src0_x < IN_W)
            {
                a2 = src0[input_batch_offset + src0_y * (IN_W * src0_depth) + src0_x * src0_depth + src0_z];
            }
            dot2.x += dot(brow0, a2);
            dot2.y += dot(brow1, a2);
            dot2.z += dot(brow2, a2);
            dot2.w += dot(brow3, a2);
            dot21.x += dot(brow01, a2);
            dot21.y += dot(brow11, a2);
            dot21.z += dot(brow21, a2);
            dot21.w += dot(brow31, a2);
            dst_x = (out_y + 3) % OUT_W;
            dst_y = (out_y + 3) / OUT_W;
            org_y = dst_y * STRIDE_H - PAD_H;
            org_x = dst_x * STRIDE_W - PAD_W;
            src0_x = org_x + (i / src0_depth) % FILTER_W;
            src0_y = org_y + (i / src0_depth) / FILTER_W;
            if(src0_y >= 0 && src0_y < IN_H && src0_x >= 0 && src0_x < IN_W)
            {
                a3 = src0[input_batch_offset + src0_y * (IN_W * src0_depth) + src0_x * src0_depth + src0_z];
            }
            dot3.x += dot(brow0, a3);
            dot3.y += dot(brow1, a3);
            dot3.z += dot(brow2, a3);
            dot3.w += dot(brow3, a3);
            dot31.x += dot(brow01, a3);
            dot31.y += dot(brow11, a3);
            dot31.z += dot(brow21, a3);
            dot31.w += dot(brow31, a3);
            i++;
        }
        while( i < width0 );
        vec4 bias_val = bias[2 * int(gl_GlobalInvocationID.x)];
        dot0 += bias_val;
        dot1 += bias_val;
        dot2 += bias_val;
        dot3 += bias_val;
        bias_val = bias[2 * int(gl_GlobalInvocationID.x) + 1];
        dot01 += bias_val;
        dot11 += bias_val;
        dot21 += bias_val;
        dot31 += bias_val;
        out0[output_batch_offset + (out_y + 0) * width1 + 2 * gx] = activation(dot0);
        out0[output_batch_offset + (out_y + 1) * width1 + 2 * gx] = activation(dot1);
        out0[output_batch_offset + (out_y + 2) * width1 + 2 * gx] = activation(dot2);
        out0[output_batch_offset + (out_y + 3) * width1 + 2 * gx] = activation(dot3);
        out0[output_batch_offset + (out_y + 0) * width1 + 2 * gx + 1] = activation(dot01);
        out0[output_batch_offset + (out_y + 1) * width1 + 2 * gx + 1] = activation(dot11);
        out0[output_batch_offset + (out_y + 2) * width1 + 2 * gx + 1] = activation(dot21);
        out0[output_batch_offset + (out_y + 3) * width1 + 2 * gx + 1] = activation(dot31);
    }
    else if (out_x < N && out_y < M && TAIL_M > 0)
    {
        int width0 = K / VEC_SIZE;
        int width1 = N / VEC_SIZE;
        int src0_depth = CHANNELS / VEC_SIZE;
        int src1_read0_offset = out_x * width0;
        vec4 dot0 = vec4(0.f);
        vec4 dot01 = vec4(0.f);

        // if TAIL_M > 1
        vec4 dot1 = vec4(0.f);
        vec4 dot11 = vec4(0.f);

        // if TAIL_M > 2
        vec4 dot2 = vec4(0.f);
        vec4 dot21 = vec4(0.f);
        int i = 0;

        do
        {
            vec4 a0 = vec4(0.f);
            // if TAIL_M > 1
            vec4 a1 = vec4(0.f);
            // TAIL_M > 2
            vec4 a2 = vec4(0.f);

            vec4 brow0  = src1[src1_read0_offset]; src1_read0_offset += width0;
            vec4 brow1  = src1[src1_read0_offset]; src1_read0_offset += width0;
            vec4 brow2  = src1[src1_read0_offset]; src1_read0_offset += width0;
            vec4 brow3  = src1[src1_read0_offset]; src1_read0_offset += width0;
            vec4 brow01 = src1[src1_read0_offset]; src1_read0_offset += width0;
            vec4 brow11 = src1[src1_read0_offset]; src1_read0_offset += width0;
            vec4 brow21 = src1[src1_read0_offset]; src1_read0_offset += width0;
            vec4 brow31 = src1[src1_read0_offset]; src1_read0_offset += width0;
            src1_read0_offset += 1 - BLOCK_W * width0;
            int dst_x = out_y % OUT_W;
            int dst_y = out_y / OUT_W;
            int org_y = dst_y * STRIDE_H - PAD_H;
            int org_x = dst_x * STRIDE_W - PAD_W;
            int src0_x = org_x + (i / src0_depth) % FILTER_W;
            int src0_y = org_y + (i / src0_depth) / FILTER_W;
            int src0_z = i % src0_depth;

            if (src0_y >= 0 && src0_y < IN_H && src0_x >= 0 && src0_x < IN_W)
            {
                a0 = src0[input_batch_offset + src0_y * (IN_W * src0_depth) + src0_x * src0_depth + src0_z];
            }

            dot0.x += dot(brow0, a0);
            dot0.y += dot(brow1, a0);
            dot0.z += dot(brow2, a0);
            dot0.w += dot(brow3, a0);
            dot01.x += dot(brow01, a0);
            dot01.y += dot(brow11, a0);
            dot01.z += dot(brow21, a0);
            dot01.w += dot(brow31, a0);

            if (TAIL_M > 1)
            {
                dst_x = (out_y + 1) % OUT_W;
                dst_y = (out_y + 1) / OUT_W;
                org_y = dst_y * STRIDE_H - PAD_H;
                org_x = dst_x * STRIDE_W - PAD_W;
                src0_x = org_x + (i / src0_depth) % FILTER_W;
                src0_y = org_y + (i / src0_depth) / FILTER_W;
                if(src0_y >= 0 && src0_y < IN_H && src0_x >= 0 && src0_x < IN_W)
                {
                    a1 = src0[input_batch_offset + src0_y * (IN_W * src0_depth) + src0_x * src0_depth + src0_z];
                }
                dot1.x += dot(brow0, a1);
                dot1.y += dot(brow1, a1);
                dot1.z += dot(brow2, a1);
                dot1.w += dot(brow3, a1);
                dot11.x += dot(brow01, a1);
                dot11.y += dot(brow11, a1);
                dot11.z += dot(brow21, a1);
                dot11.w += dot(brow31, a1);
            }

            if (TAIL_M > 2)
            {
                dst_x = (out_y + 2) % OUT_W;
                dst_y = (out_y + 2) / OUT_W;
                org_y = dst_y * STRIDE_H - PAD_H;
                org_x = dst_x * STRIDE_W - PAD_W;
                src0_x = org_x + (i / src0_depth) % FILTER_W;
                src0_y = org_y + (i / src0_depth) / FILTER_W;
                if(src0_y >= 0 && src0_y < IN_H && src0_x >= 0 && src0_x < IN_W)
                {
                    a2 = src0[input_batch_offset + src0_y * (IN_W * src0_depth) + src0_x * src0_depth + src0_z];
                }
                dot2.x += dot(brow0, a2);
                dot2.y += dot(brow1, a2);
                dot2.z += dot(brow2, a2);
                dot2.w += dot(brow3, a2);
                dot21.x += dot(brow01, a2);
                dot21.y += dot(brow11, a2);
                dot21.z += dot(brow21, a2);
                dot21.w += dot(brow31, a2);
            }
            i++;
        }
        while (i < width0);

        vec4 bias_val = bias[2 * int(gl_GlobalInvocationID.x)];
        vec4 bias_val2 = bias[2 * int(gl_GlobalInvocationID.x) + 1];
        dot0 += bias_val;
        dot01 += bias_val2;
        out0[output_batch_offset + (out_y + 0) * width1 + 2 * gx] = activation(dot0);
        out0[output_batch_offset + (out_y + 0) * width1 + 2 * gx + 1] = activation(dot01);

        if (TAIL_M > 1)
        {
            dot1 += bias_val;
            dot11 += bias_val2;
            out0[output_batch_offset + (out_y + 1) * width1 + gx] = activation(dot1);
            out0[output_batch_offset + (out_y + 1) * width1 + 2 * gx + 1] = activation(dot11);
        }

        if (TAIL_M > 2)
        {
            dot2 += bias_val;
            dot21 += bias_val2;
            out0[output_batch_offset + (out_y + 2) * width1 + gx] = activation(dot2);
            out0[output_batch_offset + (out_y + 2) * width1 + 2 * gx + 1] = activation(dot21);
        }
    }
}
