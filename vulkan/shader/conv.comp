#version 450
layout (constant_id = 0) const int LOCAL_SZ_X = 0;
layout (constant_id = 1) const int LOCAL_SZ_Y = 0;
layout (constant_id = 2) const int LOCAL_SZ_Z = 0;
layout (constant_id = 3) const int IN_H = 0;
layout (constant_id = 4) const int IN_W = 0;
layout (constant_id = 5) const int OUT_H = 0;
layout (constant_id = 6) const int OUT_W = 0;
layout (constant_id = 7) const int STRIDE_H = 0;
layout (constant_id = 8) const int STRIDE_W = 0;
layout (constant_id = 9) const int PAD_H = 0;
layout (constant_id = 10) const int PAD_W = 0;
layout (constant_id = 11) const int FILTER_H = 0;
layout (constant_id = 12) const int FILTER_W = 0;
layout (constant_id = 13) const int CHANNELS = 0;
layout (constant_id = 14) const int BATCH = 0;
layout (constant_id = 15) const int M = 0;
layout (constant_id = 16) const int K = 0;
layout (constant_id = 17) const int N = 0;
layout (constant_id = 18) const int ACTIVATION = 0;
layout (constant_id = 19) const int NUM_ITEMS = 0;

float activation(float x)
{
  if (ACTIVATION == 1) {
    return ((x) < 0.f ? 0.f : (x));
  }
  else if (ACTIVATION == 2) {
    return ((x) > 1.f ? 1.f : (x) < -1.f ? -1.f : (x));
  }
  else if (ACTIVATION == 3) {
    return ((x) > 6.f ? 6.f : (x) < 0.f ? 0.f : (x));
  }
  else {
    return x;
  }
}


layout(binding = 0) readonly buffer Input0 {
    float image_data[];
};
layout(binding = 1) readonly buffer Input1 {
    float weight_data[];
};
layout(binding = 2) readonly buffer Input2 {
    float bias_data[];
};
layout(binding = 3) writeonly buffer Output {
    float convolved_image_data[];
};

layout(local_size_x_id = 0) in;
layout(local_size_y_id = 1) in;
layout(local_size_z_id = 2) in;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx < M)
    {
        float sum = 0.0f;
        int output_y = gy / OUT_W;
        int output_x = gy % OUT_W;
        int org_y = output_y * STRIDE_H - PAD_H;
        int org_x = output_x * STRIDE_W - PAD_W;
        int weight_off = gx * K;
        int image_offset  = gz * IN_H * IN_W * CHANNELS;
        int output_offset = gz * M * N;
        int input_off = image_offset + (org_y * IN_W + org_x) * CHANNELS;

        for (int y = 0; y < FILTER_H; y++)
        {
            for (int x = 0; x < FILTER_W; x++)
            {
                if (org_y + y >= 0 && org_y + y < IN_H && org_x + x >= 0 && org_x + x < IN_W)
                {
                    for (int c = 0; c < CHANNELS; c++)
                    {
                       sum += image_data[input_off + c] * weight_data[weight_off + c];
                    }
                }
                input_off += CHANNELS;
                weight_off += CHANNELS;
            }
            input_off += IN_W * CHANNELS - CHANNELS * FILTER_W;
        }

        int offset = output_offset + gy * N + gx;
        convolved_image_data[offset] = activation(sum + bias_data[gx]);
    }
}
