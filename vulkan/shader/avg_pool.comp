#version 450
#define ZPAR 1
#define BATCH 1

layout(push_constant) uniform pushBlock {
      int channels;
      int in_h;
      int in_w;
      int out_h;
      int out_w;
      int padding_h;
      int padding_w;
      int filter_h;
      int filter_w;
      int stride_h;
      int stride_w;
      int total;
      int padded_area;
} p;

layout(binding = 0) readonly buffer Input0{
    float in_buffer[];
};

layout(binding = 1) writeonly buffer Output{
    float out_buffer[];
};

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

void main()
{
    uint outputX = gl_GlobalInvocationID.x;
    uint outputY = gl_GlobalInvocationID.y;
    uint outputZ = gl_GlobalInvocationID.z * ZPAR;
    if(outputX < p.out_w && outputY < p.out_h)
    {
        float sum[BATCH * ZPAR];
        for(uint outz = uint(0); outz < BATCH * ZPAR; outz++)
        {
            sum[outz] = 0.0f;
        }
        int org_y = int(outputY * p.stride_h - p.padding_h);
        int org_x = int(outputX * p.stride_w - p.padding_w);
        uint input_image_size  = p.in_w * p.in_h * p.channels;
        uint output_image_size = p.out_w * p.out_h * p.channels;
        uint local_image_offset = (uint(org_y) * p.in_w + uint(org_x)) * p.channels + outputZ;

        uint batch_offset = 0;
        uint cnt = 0;
        uint num = 0;
        for (uint b = 0; b < BATCH; b++)
        {
            for(uint y = 0; y < p.filter_h; y++)
            {
                for(uint x = 0; x < p.filter_w; x++)
                {
                    if(org_y + int(y) >= 0 && org_y + int(y) < int(p.in_h) && org_x + int(x) >= 0 && org_x + int(x) < int(p.in_w))
                    {
                        for(uint outz =0; outz < ZPAR; outz++)
                        {
                            sum[b * ZPAR + outz] += in_buffer[local_image_offset + outz];
                        }
                        cnt++;
                    }
                    local_image_offset += p.channels;
                }
                local_image_offset += p.in_w * p.channels - p.channels * p.filter_w;
            }
            local_image_offset += input_image_size - p.channels * p.filter_w - p.in_w * p.filter_h * p.channels;
            if (b == 0)
                num = cnt;
        }
        for (uint b = 0; b < BATCH; b++)
        {
            for(uint outz = 0; outz < ZPAR; outz++)
            {
                if (outputZ + outz < p.channels)
                {
                    uint offset = batch_offset + (outputY * p.out_w  + outputX) * p.channels + outputZ + outz;
                    out_buffer[offset] = sum[b * ZPAR + outz] / float(num);
                }
            }
            batch_offset += output_image_size;
        }
    }
}
