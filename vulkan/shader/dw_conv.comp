#version 450

layout (constant_id = 0) const int LOCAL_SZ_X = 0;
layout (constant_id = 1) const int LOCAL_SZ_Y = 0;
layout (constant_id = 2) const int LOCAL_SZ_Z = 0;
layout (constant_id = 3) const int IN_H = 0;
layout (constant_id = 4) const int IN_W = 0;
layout (constant_id = 5) const int OUT_H = 0;
layout (constant_id = 6) const int OUT_W = 0;
layout (constant_id = 7) const int STRIDE_H = 0;
layout (constant_id = 8) const int STRIDE_W = 0;
layout (constant_id = 9) const int DILATION_H = 0;
layout (constant_id = 10) const int DILATION_W = 0;
layout (constant_id = 11) const int PAD_H = 0;
layout (constant_id = 12) const int PAD_W = 0;
layout (constant_id = 13) const int FILTER_H = 0;
layout (constant_id = 14) const int FILTER_W = 0;
layout (constant_id = 15) const int CHANNELS = 0;
layout (constant_id = 16) const int HAS_BIAS = 0;
layout (constant_id = 17) const int M = 0;
layout (constant_id = 18) const int K = 0;
layout (constant_id = 19) const int N = 0;
layout (constant_id = 20) const int DEPTH_MULTIPLIER = 0;
layout (constant_id = 21) const int ACTIVATION = 0;

layout(binding = 0) readonly buffer Input0{
    float in_buffer[];
};
layout(binding = 1) readonly buffer Input2{
    float weight_data[];
};
layout(binding = 2) readonly buffer Input1 {
    float bias_data[];
};
layout(binding = 3) writeonly buffer Output{
    float out_buffer[];
};

float activation(float x)
{
  if (ACTIVATION == 1) {
    return ((x) < 0.f ? 0.f : (x));
  }
  else if (ACTIVATION == 2) {
    return ((x) > 1.f ? 1.f : (x) < -1.f ? -1.f : (x));
  }
  else if (ACTIVATION == 3) {
    return ((x) > 6.f ? 6.f : (x) < 0.f ? 0.f : (x));
  }
  else {
    return x;
  }
}

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

void main()
{
    int gx  = int(gl_GlobalInvocationID.x);
    int gy  = int(gl_GlobalInvocationID.y);
    int inz = int(gl_GlobalInvocationID.z);
    int gz  = inz * DEPTH_MULTIPLIER;

    if (gx < OUT_W && gy < OUT_H)
    {
        float sum[1];
        for (int outz = 0; outz < DEPTH_MULTIPLIER; outz++)
        {
            sum[outz] = 0.0f;
        }

        int org_y = gy * STRIDE_H - PAD_H;
        int org_x = gx * STRIDE_W - PAD_W;

        int kernel_offset = 0;
        int image_offset = 0;
        int bias_offset = 0;
        int weight_off = kernel_offset + gz;
        int bias_off = bias_offset + gz;
        int input_off = image_offset + (org_y * IN_W + org_x) * CHANNELS + inz;

        for (int y = 0; y < FILTER_H; y++)
        {
            for(int x = 0; x < FILTER_W; x++)
            {
                if (org_y + y * DILATION_H >= 0 && org_y + y * DILATION_H < IN_H && org_x + x * DILATION_W >= 0 \
                   && org_x + x * DILATION_W < IN_W)
                {
                    for (int outz =0; outz < DEPTH_MULTIPLIER; outz++)
                    {
                        sum[outz] += in_buffer[input_off] * weight_data[weight_off + outz];
                    }
                }
                input_off += DILATION_W * CHANNELS;
                weight_off += CHANNELS * DEPTH_MULTIPLIER;
            }
            input_off += IN_W * DILATION_H * CHANNELS - DILATION_W * CHANNELS * FILTER_W;
        }

        int out_buffer_offset = 0;
        if (HAS_BIAS == 1)
        {
            for (int outz = 0; outz < DEPTH_MULTIPLIER; outz++)
            {
                if (gz + outz < N)
                {
                    int offset = out_buffer_offset + (gy * OUT_W  + gx) * N + gz + outz;
                    out_buffer[offset] = activation(sum[outz] + bias_data[bias_off +outz]);
                }
            }
        }
        else
        {
            for (int outz = 0; outz < DEPTH_MULTIPLIER; outz++)
            {
                if (gz + outz < N)
                {
                    int offset = out_buffer_offset + (gy * OUT_W + gx) * N + gz + outz;
                    out_buffer[offset] = activation(sum[outz]);
                }
            }
        }
    }
}
