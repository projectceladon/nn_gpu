#version 450
#define BATCH 1
#define ZPAR 1
layout(push_constant) uniform pushBlock {
      int channels;
      int in_h;
      int in_w;
      int out_h;
      int out_w;
      int padding_h;
      int padding_w;
      int filter_h;
      int filter_w;
      int stride_h;
      int stride_w;
      int total;
      int need_mask;
} p;

layout(binding = 0) readonly buffer Input0{
    float inputbuf[];
};

layout(binding = 1) writeonly buffer Output{
    float outputbuf[];
};

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

void main()
{
    int out_x = int(gl_GlobalInvocationID.x);
    int out_y = int(gl_GlobalInvocationID.y);
    int out_z = int(gl_GlobalInvocationID.z) * ZPAR;
    if (out_x < p.out_w && out_y < p.out_h)
    {
        float sum[BATCH * ZPAR];
        for(int outz = int(0); outz < BATCH * ZPAR; outz++)
        {
            sum[outz] = 0.0f;
        }
        int org_y = out_y * p.stride_h - p.padding_h;
        int org_x = out_x * p.stride_h - p.padding_w;
        int input_size  = p.in_w * p.in_h * p.channels;
        int output_size = p.out_w * p.out_h * p.channels;
        int local_offset = (org_y * p.in_w + org_x) * p.channels + out_z;
        int batch_offset = 0;
        for (int b = 0; b < BATCH; b++)
        {
            for(int y = 0; y < p.filter_h; y++)
            {
                for(int x = 0; x < p.filter_w; x++)
                {
                    if(org_y + y >= 0 && org_y + y < p.in_h && org_x + x >= 0 && org_x + x < p.in_w)
                    {
                        for(int outz =0; outz < ZPAR; outz++)
                        {
                            sum[b * ZPAR + outz] = max(sum[b * ZPAR + outz],  inputbuf[local_offset + outz]);
                        }
                    }
                    local_offset += p.channels;
                }
                local_offset += p.in_w * p.channels - p.channels * p.filter_w;
            }
            local_offset += input_size - p.channels * p.filter_w - p.in_w * p.filter_h * p.channels;
        }

        for (int b = 0; b < BATCH; b++)
        {
            for(int outz = 0; outz < ZPAR; outz++)
            {
                if (out_z + outz < p.channels)
                {
                    int offset = batch_offset + (out_y * p.out_w  + out_x) * p.channels + out_z + outz;
                    outputbuf[offset] = sum[b * ZPAR + outz];
                }
            }
            batch_offset += output_size;
        }
    }
}
